{"version":3,"file":"script-3146a391.js","sources":["../../script.js"],"sourcesContent":["// Function to handle roof layer visibility based on player location\nfunction handleRoofLayerVisibility() {\n    const relevantAreas = ['roof_lowerLeft', 'roof_lowerRight', 'roof_upperLeft', 'roof_upperRight'];\n\n    // Check if player is in a relevant area when joining the server\n    if (relevantAreas.some(area => WA.player.location === area)) {\n        hideRoofLayers();\n    }\n\n    // Subscribe to area enter events\n    relevantAreas.forEach(area => {\n        WA.room.area.onEnter(area).subscribe(() => {\n            hideRoofLayers();\n        });\n    });\n\n    // Subscribe to area leave events\n    relevantAreas.forEach(area => {\n        WA.room.area.onLeave(area).subscribe(() => {\n            showRoofLayers();\n        });\n    });\n}\n\n// Function to hide roof layers\nfunction hideRoofLayers() {\n    WA.room.hideLayer('roofs/lowerLeft');\n    WA.room.hideLayer('roofs/lowerRight');\n    WA.room.hideLayer('roofs/upperLeft');\n    WA.room.hideLayer('roofs/upperRight');\n}\n\n// Function to show roof layers\nfunction showRoofLayers() {\n    WA.room.showLayer('roofs/lowerLeft');\n    WA.room.showLayer('roofs/lowerRight');\n    WA.room.showLayer('roofs/upperLeft');\n    WA.room.showLayer('roofs/upperRight');\n}\n\n// Call the function to handle roof layer visibility inside the onInit listener\nWA.onInit().then(() => {\n    handleRoofLayerVisibility();\n\n    // Define the URL of your webhook\n    const DEFAULT_WEBHOOK_URL = 'https://apps.taskmagic.com/api/v1/webhooks/Wn8CdqSXOlSSMewy6xL60';\n\n    // Function to send player data to the webhook\n    async function sendPlayerData(webhookUrl = DEFAULT_WEBHOOK_URL, firstPing = false) {\n        try {\n            const playerId = WA.player.uuid;\n            const playerName = WA.player.name;\n\n            if (!playerId || !playerName) {\n                throw new Error('Invalid player data');\n            }\n\n            // Create the payload\n            const payload = {\n                id: playerId,\n                name: playerName,\n                firstPing: firstPing\n            };\n\n            // Function to handle fetch with timeout\n            const fetchWithTimeout = (url, options, timeout = 5000) => {\n                return Promise.race([\n                    fetch(url, options),\n                    new Promise((_, reject) =>\n                        setTimeout(() => reject(new Error('Request timed out')), timeout)\n                    )\n                ]);\n            };\n\n            // Send the payload to the webhook\n            const response = await fetchWithTimeout(webhookUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(payload)\n            });\n\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n\n            const data = await response.json();\n            console.log('Success:', data);\n        } catch (error) {\n            console.error('Error:', error);\n        }\n\n// Call the function to send player data initially with firstPing=true\nsendPlayerData(DEFAULT_WEBHOOK_URL, true);\n\n// Call the function every 60 seconds with firstPing=false\nsetInterval(() => {\n    sendPlayerData(DEFAULT_WEBHOOK_URL, false);\n}, 60000);\n//////\n\n// Function to set outline color based on player tag\nWA.player.onEnter().subscribe(function(player) {\n    // Assuming you have a way to get the tag of the player\n    var playerTag = getPlayerTag(player); // Replace with your method to get the tag\n    setPlayerOutlineColor(player, playerTag);\n});\n\n// Function to set outline color based on player tag\nfunction setPlayerOutlineColor(player, tag) {\n    switch (tag) {\n        case \"admins\":\n            player.setOutlineColor(128, 0, 128); // Purple\n            break;\n        case \"teachers\":\n            player.setOutlineColor(0, 0, 255); // Blue\n            break;\n        case \"students\":\n            player.setOutlineColor(255, 255, 0); // Yellow\n            break;\n        default:\n            player.setOutlineColor(0, 0, 0); // Default to black if no tag matches\n    }\n}\n\n// Function to get player tag (this is just a placeholder, implement your own logic)\nfunction getPlayerTag(player) {\n    // Example logic to determine the tag\n    if (player.name.includes(\"admin\")) {\n        return \"admins\";\n    } else if (player.name.includes(\"teacher\")) {\n        return \"teachers\";\n    } else {\n        return \"students\";\n    }\n}}})\n"],"names":["handleRoofLayerVisibility","relevantAreas","area","hideRoofLayers","showRoofLayers"],"mappings":"AACA,SAASA,GAA4B,CACjC,MAAMC,EAAgB,CAAC,iBAAkB,kBAAmB,iBAAkB,iBAAiB,EAG3FA,EAAc,KAAKC,GAAQ,GAAG,OAAO,WAAaA,CAAI,GACtDC,IAIJF,EAAc,QAAQC,GAAQ,CAC1B,GAAG,KAAK,KAAK,QAAQA,CAAI,EAAE,UAAU,IAAM,CACvCC,GACZ,CAAS,CACT,CAAK,EAGDF,EAAc,QAAQC,GAAQ,CAC1B,GAAG,KAAK,KAAK,QAAQA,CAAI,EAAE,UAAU,IAAM,CACvCE,GACZ,CAAS,CACT,CAAK,CACL,CAGA,SAASD,GAAiB,CACtB,GAAG,KAAK,UAAU,iBAAiB,EACnC,GAAG,KAAK,UAAU,kBAAkB,EACpC,GAAG,KAAK,UAAU,iBAAiB,EACnC,GAAG,KAAK,UAAU,kBAAkB,CACxC,CAGA,SAASC,GAAiB,CACtB,GAAG,KAAK,UAAU,iBAAiB,EACnC,GAAG,KAAK,UAAU,kBAAkB,EACpC,GAAG,KAAK,UAAU,iBAAiB,EACnC,GAAG,KAAK,UAAU,kBAAkB,CACxC,CAGA,GAAG,OAAM,EAAG,KAAK,IAAM,CACnBJ,GA8FF,CAAC"}